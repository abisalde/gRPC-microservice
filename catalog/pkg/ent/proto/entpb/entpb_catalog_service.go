// Code generated by protoc-gen-entgrpc. DO NOT EDIT.
package entpb

import (
	context "context"
	base64 "encoding/base64"
	entproto "entgo.io/contrib/entproto"
	sqlgraph "entgo.io/ent/dialect/sql/sqlgraph"
	fmt "fmt"
	ent "github.com/abisalde/gprc-microservice/catalog/pkg/ent"
	catalog "github.com/abisalde/gprc-microservice/catalog/pkg/ent/catalog"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	strconv "strconv"
)

// CatalogService implements CatalogServiceServer
type CatalogService struct {
	client *ent.Client
	UnimplementedCatalogServiceServer
}

// NewCatalogService returns a new CatalogService
func NewCatalogService(client *ent.Client) *CatalogService {
	return &CatalogService{
		client: client,
	}
}

// toProtoCatalog transforms the ent type to the pb type
func toProtoCatalog(e *ent.Catalog) (*Catalog, error) {
	v := &Catalog{}
	description := wrapperspb.String(e.Description)
	v.Description = description
	id := int64(e.ID)
	v.Id = id
	name := e.Name
	v.Name = name
	price := e.Price
	v.Price = price
	return v, nil
}

// toProtoCatalogList transforms a list of ent type to a list of pb type
func toProtoCatalogList(e []*ent.Catalog) ([]*Catalog, error) {
	var pbList []*Catalog
	for _, entEntity := range e {
		pbEntity, err := toProtoCatalog(entEntity)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		pbList = append(pbList, pbEntity)
	}
	return pbList, nil
}

// Create implements CatalogServiceServer.Create
func (svc *CatalogService) Create(ctx context.Context, req *CreateCatalogRequest) (*Catalog, error) {
	catalog := req.GetCatalog()
	m, err := svc.createBuilder(catalog)
	if err != nil {
		return nil, err
	}
	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCatalog(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Get implements CatalogServiceServer.Get
func (svc *CatalogService) Get(ctx context.Context, req *GetCatalogRequest) (*Catalog, error) {
	var (
		err error
		get *ent.Catalog
	)
	id := int(req.GetId())
	switch req.GetView() {
	case GetCatalogRequest_VIEW_UNSPECIFIED, GetCatalogRequest_BASIC:
		get, err = svc.client.Catalog.Get(ctx, id)
	case GetCatalogRequest_WITH_EDGE_IDS:
		get, err = svc.client.Catalog.Query().
			Where(catalog.ID(id)).
			Only(ctx)
	default:
		return nil, status.Error(codes.InvalidArgument, "invalid argument: unknown view")
	}
	switch {
	case err == nil:
		return toProtoCatalog(get)
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Update implements CatalogServiceServer.Update
func (svc *CatalogService) Update(ctx context.Context, req *UpdateCatalogRequest) (*Catalog, error) {
	catalog := req.GetCatalog()
	catalogID := int(catalog.GetId())
	m := svc.client.Catalog.UpdateOneID(catalogID)
	if catalog.GetDescription() != nil {
		catalogDescription := catalog.GetDescription().GetValue()
		m.SetDescription(catalogDescription)
	}
	catalogName := catalog.GetName()
	m.SetName(catalogName)
	catalogPrice := float64(catalog.GetPrice())
	m.SetPrice(catalogPrice)

	res, err := m.Save(ctx)
	switch {
	case err == nil:
		proto, err := toProtoCatalog(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return proto, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// Delete implements CatalogServiceServer.Delete
func (svc *CatalogService) Delete(ctx context.Context, req *DeleteCatalogRequest) (*emptypb.Empty, error) {
	var err error
	id := int(req.GetId())
	err = svc.client.Catalog.DeleteOneID(id).Exec(ctx)
	switch {
	case err == nil:
		return &emptypb.Empty{}, nil
	case ent.IsNotFound(err):
		return nil, status.Errorf(codes.NotFound, "not found: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// List implements CatalogServiceServer.List
func (svc *CatalogService) List(ctx context.Context, req *ListCatalogRequest) (*ListCatalogResponse, error) {
	var (
		err      error
		entList  []*ent.Catalog
		pageSize int
	)
	pageSize = int(req.GetPageSize())
	switch {
	case pageSize < 0:
		return nil, status.Errorf(codes.InvalidArgument, "page size cannot be less than zero")
	case pageSize == 0 || pageSize > entproto.MaxPageSize:
		pageSize = entproto.MaxPageSize
	}
	listQuery := svc.client.Catalog.Query().
		Order(ent.Desc(catalog.FieldID)).
		Limit(pageSize + 1)
	if req.GetPageToken() != "" {
		bytes, err := base64.StdEncoding.DecodeString(req.PageToken)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		token, err := strconv.ParseInt(string(bytes), 10, 32)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "page token is invalid")
		}
		pageToken := int(token)
		listQuery = listQuery.
			Where(catalog.IDLTE(pageToken))
	}
	switch req.GetView() {
	case ListCatalogRequest_VIEW_UNSPECIFIED, ListCatalogRequest_BASIC:
		entList, err = listQuery.All(ctx)
	case ListCatalogRequest_WITH_EDGE_IDS:
		entList, err = listQuery.
			All(ctx)
	}
	switch {
	case err == nil:
		var nextPageToken string
		if len(entList) == pageSize+1 {
			nextPageToken = base64.StdEncoding.EncodeToString(
				[]byte(fmt.Sprintf("%v", entList[len(entList)-1].ID)))
			entList = entList[:len(entList)-1]
		}
		protoList, err := toProtoCatalogList(entList)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &ListCatalogResponse{
			CatalogList:   protoList,
			NextPageToken: nextPageToken,
		}, nil
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

// BatchCreate implements CatalogServiceServer.BatchCreate
func (svc *CatalogService) BatchCreate(ctx context.Context, req *BatchCreateCatalogsRequest) (*BatchCreateCatalogsResponse, error) {
	requests := req.GetRequests()
	if len(requests) > entproto.MaxBatchCreateSize {
		return nil, status.Errorf(codes.InvalidArgument, "batch size cannot be greater than %d", entproto.MaxBatchCreateSize)
	}
	bulk := make([]*ent.CatalogCreate, len(requests))
	for i, req := range requests {
		catalog := req.GetCatalog()
		var err error
		bulk[i], err = svc.createBuilder(catalog)
		if err != nil {
			return nil, err
		}
	}
	res, err := svc.client.Catalog.CreateBulk(bulk...).Save(ctx)
	switch {
	case err == nil:
		protoList, err := toProtoCatalogList(res)
		if err != nil {
			return nil, status.Errorf(codes.Internal, "internal error: %s", err)
		}
		return &BatchCreateCatalogsResponse{
			Catalogs: protoList,
		}, nil
	case sqlgraph.IsUniqueConstraintError(err):
		return nil, status.Errorf(codes.AlreadyExists, "already exists: %s", err)
	case ent.IsConstraintError(err):
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: %s", err)
	default:
		return nil, status.Errorf(codes.Internal, "internal error: %s", err)
	}

}

func (svc *CatalogService) createBuilder(catalog *Catalog) (*ent.CatalogCreate, error) {
	m := svc.client.Catalog.Create()
	if catalog.GetDescription() != nil {
		catalogDescription := catalog.GetDescription().GetValue()
		m.SetDescription(catalogDescription)
	}
	catalogName := catalog.GetName()
	m.SetName(catalogName)
	catalogPrice := float64(catalog.GetPrice())
	m.SetPrice(catalogPrice)
	return m, nil
}
