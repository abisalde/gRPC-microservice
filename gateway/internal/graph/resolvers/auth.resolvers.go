package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.79

import (
	"context"
	"fmt"

	"github.com/abisalde/grpc-microservice/auth/pkg/ent/proto/auth_pbuf"
	"github.com/abisalde/grpc-microservice/gateway/internal/graph/model"
	"google.golang.org/protobuf/types/known/wrapperspb"
)

// Register is the resolver for the register field.
// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.RegisterResponse, error) {
	if input.Email == "" || input.Password == "" {
		return nil, fmt.Errorf("email and password are required")
	}

	authClient := r.GetAuthClient()
	if authClient == nil {
		return nil, fmt.Errorf("auth client not available")
	}

	user, err := r.authClient.CreateUser(ctx, &auth_pbuf.User{
		Email:           input.Email,
		PasswordHash:    wrapperspb.String(input.Password),
		IsEmailVerified: true,
	})

	if err != nil {
		return nil, err // ‚Üê Return the error directly instead of empty response
	}

	// Handle case where user might be nil
	if user == nil {
		return nil, fmt.Errorf("auth service returned nil user")
	}

	// Safely handle potentially empty/nil fields
	var name *string
	if user.FirstName != "" {
		name = &user.FirstName
	}

	return &model.RegisterResponse{
		Message: "Success",
		User: &model.PublicUser{
			ID:    "1",
			Email: user.Email,
			Name:  name,
		},
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginResponse, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// VerifyAccount is the resolver for the verifyAccount field.
func (r *mutationResolver) VerifyAccount(ctx context.Context, input model.AccountVerification) (bool, error) {
	panic(fmt.Errorf("not implemented: VerifyAccount - verifyAccount"))
}

// ResendVerificationCode is the resolver for the resendVerificationCode field.
func (r *mutationResolver) ResendVerificationCode(ctx context.Context, input model.ResendVerificationCode) (bool, error) {
	panic(fmt.Errorf("not implemented: ResendVerificationCode - resendVerificationCode"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, token string, userID int32) (*model.RefreshTokenResponse, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}
