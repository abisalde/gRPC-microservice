services:
  auth:
    build:
      context: .
      dockerfile: auth/deployments/app.dockerfile
    depends_on:
      auth_db:
        condition: service_healthy
    environment:
      ENVIRONMENT: development
      AIR_WORKSPACE: /app
    ports:
      - '50051:50051'
    healthcheck:
      test:
        [
          'CMD',
          'grpcurl',
          '-plaintext',
          'localhost:50051',
          'grpc.health.v1.Health/Check',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  catalog:
    build:
      context: .
      dockerfile: catalog/deployments/app.dockerfile
    depends_on:
      catalog_db:
        condition: service_healthy
    environment:
      ENVIRONMENT: development
      AIR_WORKSPACE: /app
    ports:
      - '50052:50052'
    healthcheck:
      test:
        [
          'CMD',
          'grpcurl',
          '-plaintext',
          'localhost:50052',
          'grpc.health.v1.Health/Check',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: on-failure

  gateway:
    build:
      context: .
      dockerfile: gateway/deployments/app.dockerfile
    depends_on:
      auth:
        condition: service_healthy
      catalog:
        condition: service_healthy
    environment:
      AUTH_SERVICE_URL: auth:50051
      CATALOG_SERVICE_URL: catalog:50052
      ENVIRONMENT: development
      AIR_WORKSPACE: /app
    restart: on-failure
    ports:
      - '8080:8080'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  auth_db:
    build:
      context: .
      dockerfile: auth/deployments/db.dockerfile
    environment:
      POSTGRES_USER: microservice-user
      POSTGRES_PASSWORD: Password123
      POSTGRES_DB: microservice
    ports:
      - '5432:5432'
    restart: unless-stopped
    volumes:
      - auth_db_data:/var/lib/postgres/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U microservice-user -d microservice || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  catalog_db:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    container_name: catalog_db
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: -Xms1g -Xmx1g
      cluster.name: catalog-cluster
      node.name: catalog-node
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - catalog_db_data:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'curl -s -f http://localhost:9200/_cluster/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

volumes:
  auth_db_data:
  catalog_db_data:
  go-mod:

networks:
  microservice-network-dev:
    name: microservice-network-dev
    driver: bridge
