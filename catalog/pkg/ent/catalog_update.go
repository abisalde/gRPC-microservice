// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abisalde/gprc-microservice/catalog/pkg/ent/catalog"
	"github.com/abisalde/gprc-microservice/catalog/pkg/ent/predicate"
)

// CatalogUpdate is the builder for updating Catalog entities.
type CatalogUpdate struct {
	config
	hooks    []Hook
	mutation *CatalogMutation
}

// Where appends a list predicates to the CatalogUpdate builder.
func (_u *CatalogUpdate) Where(ps ...predicate.Catalog) *CatalogUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CatalogUpdate) SetName(v string) *CatalogUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CatalogUpdate) SetNillableName(v *string) *CatalogUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CatalogUpdate) SetDescription(v string) *CatalogUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CatalogUpdate) SetNillableDescription(v *string) *CatalogUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CatalogUpdate) ClearDescription() *CatalogUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrice sets the "price" field.
func (_u *CatalogUpdate) SetPrice(v float64) *CatalogUpdate {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *CatalogUpdate) SetNillablePrice(v *float64) *CatalogUpdate {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *CatalogUpdate) AddPrice(v float64) *CatalogUpdate {
	_u.mutation.AddPrice(v)
	return _u
}

// Mutation returns the CatalogMutation object of the builder.
func (_u *CatalogUpdate) Mutation() *CatalogMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CatalogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CatalogUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CatalogUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CatalogUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CatalogUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(catalog.Table, catalog.Columns, sqlgraph.NewFieldSpec(catalog.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(catalog.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(catalog.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(catalog.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(catalog.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(catalog.FieldPrice, field.TypeFloat64, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{catalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CatalogUpdateOne is the builder for updating a single Catalog entity.
type CatalogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CatalogMutation
}

// SetName sets the "name" field.
func (_u *CatalogUpdateOne) SetName(v string) *CatalogUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CatalogUpdateOne) SetNillableName(v *string) *CatalogUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CatalogUpdateOne) SetDescription(v string) *CatalogUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CatalogUpdateOne) SetNillableDescription(v *string) *CatalogUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CatalogUpdateOne) ClearDescription() *CatalogUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetPrice sets the "price" field.
func (_u *CatalogUpdateOne) SetPrice(v float64) *CatalogUpdateOne {
	_u.mutation.ResetPrice()
	_u.mutation.SetPrice(v)
	return _u
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_u *CatalogUpdateOne) SetNillablePrice(v *float64) *CatalogUpdateOne {
	if v != nil {
		_u.SetPrice(*v)
	}
	return _u
}

// AddPrice adds value to the "price" field.
func (_u *CatalogUpdateOne) AddPrice(v float64) *CatalogUpdateOne {
	_u.mutation.AddPrice(v)
	return _u
}

// Mutation returns the CatalogMutation object of the builder.
func (_u *CatalogUpdateOne) Mutation() *CatalogMutation {
	return _u.mutation
}

// Where appends a list predicates to the CatalogUpdate builder.
func (_u *CatalogUpdateOne) Where(ps ...predicate.Catalog) *CatalogUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CatalogUpdateOne) Select(field string, fields ...string) *CatalogUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Catalog entity.
func (_u *CatalogUpdateOne) Save(ctx context.Context) (*Catalog, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CatalogUpdateOne) SaveX(ctx context.Context) *Catalog {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CatalogUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CatalogUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CatalogUpdateOne) sqlSave(ctx context.Context) (_node *Catalog, err error) {
	_spec := sqlgraph.NewUpdateSpec(catalog.Table, catalog.Columns, sqlgraph.NewFieldSpec(catalog.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Catalog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, catalog.FieldID)
		for _, f := range fields {
			if !catalog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != catalog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(catalog.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(catalog.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(catalog.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Price(); ok {
		_spec.SetField(catalog.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedPrice(); ok {
		_spec.AddField(catalog.FieldPrice, field.TypeFloat64, value)
	}
	_node = &Catalog{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{catalog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
