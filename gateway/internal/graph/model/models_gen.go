// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountVerification struct {
	Code  string `json:"code"`
	Email string `json:"email"`
}

type CreateProductInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type LoginResponse struct {
	Token        string  `json:"token"`
	UserID       string  `json:"userId"`
	Email        string  `json:"email"`
	RefreshToken *string `json:"refreshToken,omitempty"`
}

type Mutation struct {
}

type PaginationInput struct {
	Skip *int32 `json:"skip,omitempty"`
	Take *int32 `json:"take,omitempty"`
}

// Represent a Catalog/Products
type Product struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Price       float64   `json:"price"`
	CreatedAt   time.Time `json:"createdAt"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type PublicUser struct {
	ID    string  `json:"id"`
	Email string  `json:"email"`
	Name  *string `json:"name,omitempty"`
}

type Query struct {
}

type RefreshTokenResponse struct {
	Token string `json:"token"`
}

type RegisterInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Registration & OAUTH
type RegisterResponse struct {
	User    *PublicUser `json:"user"`
	Message string      `json:"message"`
}

type ResendVerificationCode struct {
	Email string `json:"email"`
}

// Represents a user in the system.
type User struct {
	ID string `json:"id"`
	// User's primary email (must be unique)
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	LastName  string    `json:"lastName"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
	// USER or ADMIN
	Role            UserRole `json:"role"`
	IsEmailVerified bool     `json:"isEmailVerified"`
}

// Rate Limit Methods enum
type RateLimitMethods string

const (
	RateLimitMethodsLogin                  RateLimitMethods = "LOGIN"
	RateLimitMethodsRegister               RateLimitMethods = "REGISTER"
	RateLimitMethodsUpdateProfile          RateLimitMethods = "UPDATE_PROFILE"
	RateLimitMethodsChangePassword         RateLimitMethods = "CHANGE_PASSWORD"
	RateLimitMethodsVerifyAccount          RateLimitMethods = "VERIFY_ACCOUNT"
	RateLimitMethodsResendVerificationCode RateLimitMethods = "RESEND_VERIFICATION_CODE"
	RateLimitMethodsRefreshToken           RateLimitMethods = "REFRESH_TOKEN"
)

var AllRateLimitMethods = []RateLimitMethods{
	RateLimitMethodsLogin,
	RateLimitMethodsRegister,
	RateLimitMethodsUpdateProfile,
	RateLimitMethodsChangePassword,
	RateLimitMethodsVerifyAccount,
	RateLimitMethodsResendVerificationCode,
	RateLimitMethodsRefreshToken,
}

func (e RateLimitMethods) IsValid() bool {
	switch e {
	case RateLimitMethodsLogin, RateLimitMethodsRegister, RateLimitMethodsUpdateProfile, RateLimitMethodsChangePassword, RateLimitMethodsVerifyAccount, RateLimitMethodsResendVerificationCode, RateLimitMethodsRefreshToken:
		return true
	}
	return false
}

func (e RateLimitMethods) String() string {
	return string(e)
}

func (e *RateLimitMethods) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RateLimitMethods(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RateLimitMethods", str)
	}
	return nil
}

func (e RateLimitMethods) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RateLimitMethods) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RateLimitMethods) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

// UserRole maybe ADMIN or USER
type UserRole string

const (
	UserRoleAdmin UserRole = "ADMIN"
	UserRoleUser  UserRole = "USER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleUser,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleUser:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
